set showmode
set clipboard+=unnamed
set smartcase
set history=10000

" https://youtrack.jetbrains.com/issue/VIM-959
set ideamarks
set idearefactormode=keep

" https://github.com/JetBrains/ideavim/wiki/%60ideajoin%60-examples
set ideajoin

" https://youtrack.jetbrains.com/issue/VIM-1521
set commentary

" https://github.com/JetBrains/ideavim/wiki/Select-mode
set selectmode-=template

"  Mouseless Driven Development by Hadi Hariri https://www.youtube.com/watch?v=UH6YVv9js3s 
" https://github.com/JetBrains/ideavim
" https://github.com/Valloric/dotfiles/blob/master/intellij/ideavimrc
" https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf
set surround
set easymotion
let mapleader = " "

" reload ideavimrc
nnoremap <Leader><Leader>r :source ~/.ideavimrc<CR>

" Yank from cursor to end of line, to be consistent with C and D.
nnoremap Y y$

" ===================== 
"    ActionSearch 
" =====================
noremap <Leader>a :action GotoAction<CR>

" misc actions
nnoremap <Leader>z :action ToggleZenMode<CR>
" nnoremap <Leader><Leader>z :action ToggleDistractionFreeMode<CR>
nnoremap <Leader>x :q<CR>

" ===================== 
"     REFACTORING
" =====================
noremap <Leader>rv :action IntroduceVariable<CR>
noremap <Leader>rn :action Inline<CR>
noremap <Leader>rm :action ExtractMethod<CR>

" Alt + Shift + Insert in idea. 
" map <Leader>v :action EditorToggleColumnMode<CR>

" Alt + Shift + Insert in idea. 
nnoremap <Leader>\| :action SplitVertically<CR>
nnoremap <Leader>_ :action SplitHorizontally<CR>

" Navigation
noremap <C-i> :action Forward<CR>
noremap <C-o> :action Back<CR>

" Folding
nnoremap zf :action CollapseRegion<CR>
nnoremap zd :action ExpandRegion<CR>

" bookmarks (a bit similar to vim marks)
nnoremap m :action ToggleBookmarkWithMnemonic<CR>
nnoremap ' :action ShowBookmarks<CR>
nnoremap ]b :action GotoNextBookmark<CR>
nnoremap [b :action GotoPreviousBookmark<CR>

"search with builtin search
nnoremap / :action Find<cr>

"select all occurrences with builtin method
noremap * :action SelectAllOccurrences<cr>

" unimpaired mappings
nnoremap [<Space> O<esc>j
nnoremap ]<Space> o<esc>k
nnoremap [c :action JumpToNextChange<cr>
nnoremap ]c :action JumpToLastChange<cr>

" easymotion commands
let g:EasyMotion_smartcase = 1
map <Leader>f <Plug>(easymotion-bd-f)
map <Leader>l <Plug>(easymotion-fl)
map <Leader>j <Plug>(easymotion-f)
map <Leader>k <Plug>(easymotion-F)
map <Leader>h <Plug>(easymotion-Fl)
map <Leader>J <Plug>(easymotion-j)
map <Leader>K <Plug>(easymotion-k)
